# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/bionic64"

  # config.ssh.forward_agent = true
  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.define "image-0" do |web0|
    web0.vm.network "private_network", ip: "192.168.33.10"
    web0.vm.provider "virtualbox" do |vb|
      vb.cpus = 2
      vb.memory = "4096"
    end
    web0.vm.provision "shell", inline: <<-SHELL
      apt-get update
      apt-get install -y
    SHELL
    web0.vm.provision "ansible" do |ansible|
      ansible.playbook = "competitor.yaml"
      ansible.inventory_path = "inventory/hosts0"
      ansible.limit = 'all'
      ansible.verbose = "v"
      # ansible.raw_arguments = "--vault-password-file=.vault_password"
    end
  end

  config.vm.define "image-1" do |web1|
    web1.vm.network "private_network", ip: "192.168.33.11"
    web1.vm.provider "virtualbox" do |vb|
      vb.cpus = 2
      vb.memory = "4096"
    end
    web1.vm.provision "shell", inline: <<-SHELL
      apt-get update
      apt-get install -y
    SHELL
    web1.vm.provision "ansible" do |ansible|
      ansible.playbook = "competitor.yaml"
      ansible.inventory_path = "inventory/hosts1"
      ansible.limit = 'all'
      ansible.verbose = "v"
      # ansible.raw_arguments = "--vault-password-file=.vault_password"
    end
  end

  config.vm.define "image-2" do |web2|
    web2.vm.network "private_network", ip: "192.168.33.12"
    web2.vm.provider "virtualbox" do |vb|
      vb.cpus = 2
      vb.memory = "4096"
    end
    web2.vm.provision "shell", inline: <<-SHELL
      apt-get update
      apt-get install -y
    SHELL
    web2.vm.provision "ansible" do |ansible|
      ansible.playbook = "competitor.yaml"
      ansible.inventory_path = "inventory/hosts2"
      ansible.limit = 'all'
      ansible.verbose = "v"
      # ansible.raw_arguments = "--vault-password-file=.vault_password"
    end
  end

  config.vm.define "bench" do |bench|
    bench.vm.network "private_network", ip:"192.168.33.9"
    bench.vm.provision "shell", inline: <<-SHELL
      apt-get update
      apt-get install -y
    SHELL
    bench.vm.provision "ansible" do |ansible|
      ansible.playbook = "bench.yaml"
      ansible.inventory_path = "inventory/hosts"
      ansible.limit = 'all'
      ansible.verbose = "v"
      # ansible.raw_arguments = "--vault-password-file=.vault_password"
    end
  end
end
